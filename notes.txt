1.Create folder on desktop, open on vs code.

2.npm create vite@latest .(dot)	-- You are already inside a folder and want to scaffold the project there
  npm create vite@latest project_name -- You want to create a new project in a new folder

3.npm i -- for node_modules(all depensencies for projects). These are defined in the package.json
  "dependencies" ‚Äì code needed at runtime
  "devDependencies" ‚Äì code needed only during development.
  It‚Äôs excluded in .gitignore

Folder Structure For React Project --

a.üìÅ public/ -- Static files go here (e.g., images, icons, robots.txt)
  Jo files public/ folder mein hain, wo bina kisi badlaav ke (as-is) browser ko milti hain ‚Äî aur directly root URL par milti hain.Iska matlab hai Vite koi processing ya bundling nahi karta un files ke saath.

b.üìÅ src/ -- Source code lives here (JavaScript/TypeScript, components, styles)
You‚Äôll usually create subfolders here like components/, pages/, assets/, etc.
Default files:

main.ts / main.jsx ‚Äì app entry point (where rendering starts), "main.js converts App.js into DOM structure"
That action is called ‚Äúmounting to the DOM‚Äù.(mount - to organize something)

App.tsx / App.jsx ‚Äì main component of the app. Core UI layout/component

c.Git --	A tool on your computer	Tracks changes to files (version control).Git is a piece of software.
  GitHub -- A website Stores your Git projects online so you can share and collaborate

üìÑgitignore -- Tells Git which files/folders to ignore or not include in version control(Version control is the software engineering practice of controlling, organizing, and tracking different versions in history of computer files; primarily source code text files). Usually includes: node_modules/, .env, dist/. These files will not be committed or pushed to GitHub or other repos.

d.ESLint --	Focuses on code quality and errors. eslint.config.js --It is a configuration file for ESLint.A configuration file is a file that tells a tool how to behave or what settings to use.

e.index.html -- The first HTML file the browser loads.
Vite‚Äôs role	-- Serves it and injects your app into it
<div id="root">	The placeholder where your app goes.

üîÑ Step-by-Step: What Happens When You Open the App?
‚úÖ Browser loads index.html
‚úÖ It sees this line: <script type="module" src="/main.js"></script>
‚úÖ Browser then loads and runs main.js
‚úÖ main.js renders the React (or Vue) app inside <div id="root">

f.package-lock.json -- Locks the exact versions of every installed package.Makes sure everyone installs the exact same thing, even on different computers.
10.package.json --	Lists your app's dependencies and scripts(Scripts are shortcut commands we define to run common tasks ‚Äî like starting your app, building it, or running tests).

g.üìÑ README.md -- Basic project instructions. Safe to edit or replace with your own project documentation

h.vite.config.js -- is like a settings file for Vite.

Which plugins to use (like React, Vue, etc.)
How to run the dev server (port, proxy, etc.)
Where the build files should go

It tells Vite:
"Hey, I'm using React"
"Start my app on port 3000"
"Put the final build files in the dist/ folder".

4. Then install tailwind vite, using 6 step process. It will add two extra file - postcss.config.js and tailwind.config.js.
Delete App.css from src, we don't need it, becoz we are using tailwind css. Delete static file inside public,
delete react.svg file from assets, delete all code of App.jsx and replace with rfc code.

5.Pushing code at github -- type three commands - 1. git init (enter) 2. git add . (enter) 3. git commit -m "about project". Then create repository on github.After that run there given commands of repository on terminal -1.  git remote add origin https://github.com/abhianand3672/Skill-Share.git (enter)
          2.  git branch -M main (enter)
          3.  git push -u origin main(enter)


CREATE PAGES AND ROUTE --------------------------------------------------------------------------------------


1. Inside src, create pages folder, inside it create .jsx pages, like - Sign.jsx, About.jsx, Home.jsx, etc.
2. For routing between pages, we will install npm i react-router-dom, inside client folder, then setup route of pages in App.jsx. 

CREATE HEADER COMPONENT --------------------------------------------------------------------------------------

1. Inside src folder create component, inside it create header.jsx. Install npm i react-icons for using icons in react project, then import {FaSearch} from 'react-icons/fa'; in HEADER.jsx.

<div className="flex justify-between items-center max-w-6xl mx-auto p-3">

flex- Applies display: flex
Turns the element into a flex container, allowing for horizontal or vertical alignment of children.

justify-between- Applies justify-content: space-between
Horizontally spaces child elements so the first item is at the start, the last item is at the end, and others (if any) are spaced evenly in between.

items-center- Applies align-items: center,Vertically centers child elements within the flex container (along the cross-axis).

max-w-6xl-Applies a maximum width of 6xl, which is 72rem (i.e., 1152px).Prevents the container from getting too wide, useful for centered content on large screens.

mx-auto-Applies margin-left: auto and margin-right: auto.Horizontally centers the element inside its parent container.

p-3-Applies padding of 0.75rem (12px) on all sides (top, right, bottom, left).

üîç Summary:-This whole utility class set is commonly used for centered page headers, navbars, or layout wrappers:


CREATE AND RUN THE SERVER ------------------------------------------------------------------------------------------

1.Inside api, npm init -y for package.json. Then npm i express for express. Create index.js for creating server, then npm i nodemon.

2.A callback is a function passed as an argument to another function.This technique allows a function to call another function. When you pass a function as an argument, remember not to use parenthesis.

3.app.listen(3000, () => {                          {/* calling listen function/method. () => {} arrow function*/}
    console.log('Server is running of port 3000');
}). 
After function call we can't directly apply {inside message}, only possible in function/method definition.


CONNECTING TO DATABASE ----------------------------------------------------------------------------------------------

npm i mongoose, in api, import it. Then mongoose.connect("database link"). For database link, create project on mongodb, then create cluster, copy link and past in place.Link must contain username and password.

Mongoose is an Object Data Modeling (ODM) library for MongoDB. Define a structure for your data (called a schema)
Save, read, update, and delete data easily.

Username -- Abhishek 
Password -- @Dsa550!, url incodede version - %40Dsa550%21. (Special characters like !, @, :, etc. in passwords break URLs unless they are URL-encoded.)

Can't use enviromental variable inside backend, so have to do npm i dotenv and import it.

We use .then() and .catch() to handle Promises in JavaScript. A Promise is a way to handle asynchronous operations. 
.then() and .catch() are methods that belong to Promise objects in JavaScript.
.then() runs when the Promise is fulfilled (i.e. successful). .catch() runs when the Promise is rejected (i.e. it fails or errors).


CREATING USER MODELS -------------------------------------------------------------------------------------

CREATE API ROUTE-----------------------------------------------------------------------------------------

An API, or Application Programming Interface, is a set of rules and specifications that allows different software systems to communicate and interact with each other. It acts as a messenger, enabling one application to request data or functionality from another.

Create route in api folder, inside it user.route.js.

      export	                   Correct import
export const signup = ..      import { signup } from './file.js'
export default signup;	      import signup from './file.js'

npm i bcryptjs -- for password encryption, bcryptjs is a JavaScript library. It's used to securely store passwords in a database.

hashSync(...)	A synchronous method that returns the hashed version of a string (i.e., the password).

About - const hashedPassword = bcryptjs.hashSync(password,10);

Password hashing is a process that converts a password into an irreversible, fixed-length string of characters.
"salt" is a unique, random string added to a password before it's hashed. Without a salt, identical passwords would produce the same hash, allowing attackers to use precomputed tables to crack them quickly.

The number 10 is the cost factor or salt rounds.
üîÅ It means bcrypt will perform 2¬π‚Å∞ = 1024 iterations of hashing.

Feature	      try...catch	             .then().catch()
Used with	    async/await	               Promises

Flow of code -- index.js -This is the main entry file. It sets up Express and connects routes:
                routes.js -This defines what endpoint maps to which controller function:
                controllers.js -This handles the actual logic ‚Äî e.g., saving user to DB, hashing passwords, etc.


CREATING MIDDLEWARE AND FUNCTION TO HANDEL POSSIBLE ERROR ------------------------------------------------------------

Middleware is code that runs between the request and the response.Middleware is a function that executes before the API logic. It can Handle errors.It‚Äôs used to check, modify, or log requests before they reach the API.

A log a technique used to record information about requests and responses as they pass through middleware components in an application.Logs can be used to track who accessed what, when, and from where

\\\\\\\\\\\\\\\\\\It must call next() to move to the next middleware or route handler.//////////////////////////////

An API in Express is a route handler that processes an HTTP request and returns a response.

What is a Middleware Function in Express.js?
In Express.js, a middleware function is essentially a function that has access to the request object (req), the response object (res), and the next middleware function in the application's request-response cycle.

‚úÖ app.use(...) This registers middleware ‚Äî code that runs on every request.
When it has 4 parameters (err, req, res, next), Express treats it as an error-handling middleware.

‚úÖ (err, req, res, next) => { ... }
These parameters mean:
err: The error that was thrown or passed by next(err)
req: The request object
res: The response object
next: The next middleware (usually not used here)

‚úÖ const statusCode = err.statusCode || 500;
If the error has a statusCode property (e.g. 404, 401), use it.

Otherwise, default to 500 (Internal Server Error).

‚úÖ const message = err.message || "Internal Server Error";
Get the custom error message if available, otherwise use the default.

‚úÖ return res.status(statusCode).json({ ... })
Send a structured JSON response back to the client with:
res.status(500)	‚ùå Sets status, but sends nothing
res.status(500).send("Error")	‚úÖ Sends plain text
res.status(500).json({...})	‚úÖ Sends structured data (best for APIs)

Middleware functions can perform various tasks:

Make changes to the request and the response objects: They can modify req (e.g., add properties, parse body data) or res (e.g., set headers).

End the request-response cycle: They can send a response back to the client, effectively ending the request.

Call the next middleware function in the stack: If they don't end the cycle, they must call next() to pass control to the next middleware function or route handler in line. If next() is not called, the request will "hang" and eventually time out.


COMPLETE SIGNUP PAGE UI ------------------------------------------------------------------------------------------


CREATE SIGN IN API ROUTE -----------------------------------------------------------------------------------------

installing npm i jsonwebtoken 

COMPLETE Sign in PAGE functionality--------------------------------------------------------------------------------


ADD REDUX TOOLKIT -------------------------------------------------------------------------------------------------

üß∞ When to Use Redux Toolkit
Global state like auth, user info, cart, theme(so that we can have access it anywhere)
Shared data across multiple components
You need caching, memoization, or async handling

learn -- Redux, Context api, api, rest api, link vs api.

